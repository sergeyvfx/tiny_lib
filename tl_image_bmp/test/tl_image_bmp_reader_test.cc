// Copyright (c) 2022 tiny lib authors
//
// SPDX-License-Identifier: MIT-0

#include "tl_image_bmp/tl_image_bmp_reader.h"

#include <array>
#include <functional>
#include <span>
#include <vector>

#include "tiny_lib/unittest/test.h"

namespace tiny_lib::image_bmp_reader {

namespace {

using MemoryReader = internal::MemoryReader;

// RGB888 8 bit PNG image.
//
// Generated with the following command:
//
//   convert -size 9x4 xc:"rgb(32, 64, 128)" bmp:- | xxd -include
//
// ImageMagick version: ImageMagick 7.1.0-17 Q16-HDRI x86_64 2021-12-04
//
// NOLINTNEXTLINE(readability-identifier-naming)
constexpr auto kRGB888_8bit = std::to_array<uint8_t>(
    {0x42, 0x4d, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8a, 0x00,
     0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x04, 0x00,
     0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff,
     0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x42, 0x47,
     0x52, 0x73, 0x80, 0xc2, 0xf5, 0x28, 0x60, 0xb8, 0x1e, 0x15, 0x20, 0x85,
     0xeb, 0x01, 0x40, 0x33, 0x33, 0x13, 0x80, 0x66, 0x66, 0x26, 0x40, 0x66,
     0x66, 0x06, 0xa0, 0x99, 0x99, 0x09, 0x3c, 0x0a, 0xd7, 0x03, 0x24, 0x5c,
     0x8f, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x20, 0x80, 0x40, 0x20,
     0x80, 0x40, 0x20, 0x80, 0x40, 0x20, 0x80, 0x40, 0x20, 0x80, 0x40, 0x20,
     0x80, 0x40, 0x20, 0x80, 0x40, 0x20, 0x80, 0x40, 0x20, 0x00, 0x80, 0x40,
     0x20, 0x80, 0x40, 0x20, 0x80, 0x40, 0x20, 0x80, 0x40, 0x20, 0x80, 0x40,
     0x20, 0x80, 0x40, 0x20, 0x80, 0x40, 0x20, 0x80, 0x40, 0x20, 0x80, 0x40,
     0x20, 0x00, 0x80, 0x40, 0x20, 0x80, 0x40, 0x20, 0x80, 0x40, 0x20, 0x80,
     0x40, 0x20, 0x80, 0x40, 0x20, 0x80, 0x40, 0x20, 0x80, 0x40, 0x20, 0x80,
     0x40, 0x20, 0x80, 0x40, 0x20, 0x00, 0x80, 0x40, 0x20, 0x80, 0x40, 0x20,
     0x80, 0x40, 0x20, 0x80, 0x40, 0x20, 0x80, 0x40, 0x20, 0x80, 0x40, 0x20,
     0x80, 0x40, 0x20, 0x80, 0x40, 0x20, 0x80, 0x40, 0x20, 0x00});

}  // namespace

TEST(tl_image_bmp_reader, IsBMPHeader) {
  EXPECT_FALSE(IsBMPHeader({{0, 0, 0, 0}}));

  EXPECT_TRUE(IsBMPHeader(
      {{0x42, 0x4d, 0xea, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8a,
        0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
        0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}}));
}

TEST(tl_image_bmp_reader, GetFormatSpec) {
  constexpr auto kFileHeader = std::to_array<uint8_t>(
      {0x42, 0x4d, 0xea, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8a,
       0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
       0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00});

  MemoryReader memory_reader(kFileHeader);
  Reader<MemoryReader> reader;

  EXPECT_TRUE(reader.Open(memory_reader));

  const FormatSpec format_spec = reader.GetFormatSpec();

  EXPECT_EQ(format_spec.width, 8);
  EXPECT_EQ(format_spec.height, 4);
  EXPECT_EQ(format_spec.num_bits_per_pixel, 24);
  EXPECT_FALSE(format_spec.is_stored_top_to_bottom);
}

TEST(tl_image_bmp_reader, Read) {
  const PixelsSpec pixels_spec = {
      .num_channels = 3,
  };

  MemoryReader memory_reader(kRGB888_8bit);
  Reader<MemoryReader> reader;

  EXPECT_TRUE(reader.Open(memory_reader));

  std::array<uint8_t, size_t(9) * 4 * 3> pixels;
  EXPECT_EQ(reader.Read(pixels_spec, pixels), Result::kOk);

  for (int y = 0; y < 4; ++y) {
    for (int x = 0; x < 9; ++x) {
      const int index = (y * 8 + x) * 3;
      EXPECT_EQ(pixels[index + 0], 32) << "x: " << x << " y: " << y << " c: 0";
      EXPECT_EQ(pixels[index + 1], 64) << "x: " << x << " y: " << y << " c: 1";
      EXPECT_EQ(pixels[index + 2], 128) << "x: " << x << " y: " << y << " c: 2";
    }
  }
}

}  // namespace tiny_lib::image_bmp_reader
